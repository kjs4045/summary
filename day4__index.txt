package koreait.day02;

//변수 : variable
public class C05_IntgerVar {

	public static void main(String[] args) {  //main 메소드 시작
		/* 1. main 메소드 안에서만 사용하는 지역변수를 선언합니다.
		 * 2. 기본형 (primitive) 데이터 타입 : 
 		 *      정수형식 byte, short, int, long 키워드(역할이 정해진 단어)
		 */

		byte n1;             //byte 형식의 데이터를 저장할 공간. 이름은 n1
		short n2;
		int n3;
		long n4;
		
		int currentNo; //변수명은 실제 저장되는값이 파악되는 단어로 만듭니다.
		
		//변수를 선언하면서 초기값도 주었습니다.
        byte m1=100;
        short m2=100;
        int m3=100;
        long m4=100;
        //노란색 줄은 변수 선언후 사용을 안해서 생김
        // 리터럴은 표현 그 자체 n4= 1234      1234리터럴
        
 //       System.out.println(n1); //오류: 값이 없는 변수. 초기값이 없습니다.
        System.out.println(m1);
        System.out.println(m2);     
        
        //값의 대입=
        n1=123;     //대입문 = 오른쪽 값/수식/변수가 왼쪽 변수로 대입. 
//                           123은 4바이트 리터럴. byte와 short은 별도 리터럴 표기방식이 없습니다.
//                           자동으로 값이 넘치지 않으면 1바이트 또는 2바이트롤 크기가 바뀌어 저장됨.
//        n1=999;     //오류  : +127 보다 큰 값 n1=byte byte, 정수의 최대값=127
        n2=29999;
//        n2=-40000;   //오류  : -32768 보다 작은 값
        n3=-40000;
        n3=123456789;
//        n3=1234567890123;     //오류 : 2147483647 보다 큰 값
//        n4=1234567890123;     //오류 : 1234567890123 리터럴은 int 리터럴이므로 표현 오류
        n4=123;                 // 오류아님 :123리터럴은 int 리터럴 표현범위.
        n4=1234567890123L;     //long 리터럴 표시는 : L 또는 l 을 마지막에 씁니다.
       
        System.out.println("변수 n1 = " + n1);
        System.out.println("변수 n2 = " + n2);
        System.out.printf("변수 %s  = %d \n " ,"n3", n3);
        System.out.printf("변수 %s  = %d \n " ,"n4", n4);
	} //main 메소드 긑
         // 대입문 또는 리터럴 표시할 때 값의 범위가 넘어가면 overflow
}
/*변수 : 메모리에 저장된 값 중에서 변경할 수 있는 데이터를 말합니다.
 *    변수는 프로그램이 실행되는 동안에 임시로 사용하는 메모리 공간입니다.
 *	    데이터가 저장된 메모리에 접근하기 위해서 변수명(식별자)을 부여합니다.
 *    변수 선언한다 -> 변수명과 데이터 형식을 지정하는 것.-> 메모리에 공간 할당 됩니다.
 *    조사할 내용: 변수명 규칙
 */
//(1) 대소문자가 구분되며 길이에 제한이 없다.
//
//- int num ; // 변수명이 소문자로만 이루어져 있다.
//- int nuM ; // 변수명에 소문자뿐만 아니라 대문자도 들어간다. 
//             위 두 개의 변수는 대소문자를 구분하기 때문에 다른 변수로 식별된다.
//
//(2) 예약어(keyword, reserved word)는 사용할 수 없다.
//
//- int truE ; // 대문자가 포함된 truE는 예약어가 아니다.
//- int true ; // 소문자로만 이루어진 true의 명칭은 예약어이다.
//                  || 팁 : Eclipse에 변수를 선언할 때 명칭의 색이 자주색으로 표현되는 경우 예약어이다.
//
//(3) 숫자로 시작해서는 안 된다.
//
//- int 7top ; // 변수명의 시작은 숫자가 올 수 없다.
//- int top10 ; // 변수명의 뒤쪽에는 숫자가 올 수 있다.
//
//(4) 특수문자는 '_'와 '$'만을 허용한다.
//
//- int fried_chicken$ ; // 변수명에 사용가능한 특수문자만 들어가 있으므로 사용할 수 있다.int fried&chicken@ ;
//-  // 변수명이 사용불가인 특수문자(&,@)가 있어 사용할 수 없다.
// 
//|| 필수는 아니지만 가독성 향상을 위해 자바프로그래머들의 암묵적인 약속들.
//-  클래스명의 첫 글자는 대문자로 써야 한다.
//-  여러 단어로 이루어진 경우 첫 번째 이후  단어의 첫 글자는 대문자로 써야 한다.
//-  상수의 이름은 모두 대문자로 써야 한다. 여러 단어일 경우 '_'로 구분한다.
